{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["export interface BrightnessArray {\n  data: number[][];\n  width: number;\n  height: number;\n}\n\nexport interface SukashiOptions {\n  pixelSize?: number;\n  container?: HTMLElement;\n}\n\nexport function isAppleDevice(): boolean {\n  return /Mac|iPhone|iPad|iPod/.test(navigator.userAgent);\n}\n\nexport function createSukashi(brightnessArray: BrightnessArray, options: SukashiOptions = {}): HTMLElement {\n  const { pixelSize = 4, container } = options;\n  \n  const element = document.createElement('div');\n  element.className = 'sukashi-container';\n  element.style.display = 'grid';\n  element.style.gridTemplateColumns = `repeat(${brightnessArray.width}, ${pixelSize}px)`;\n  element.style.gridTemplateRows = `repeat(${brightnessArray.height}, ${pixelSize}px)`;\n  element.style.gap = '0';\n  element.style.width = `${brightnessArray.width * pixelSize}px`;\n  element.style.height = `${brightnessArray.height * pixelSize}px`;\n  \n  for (let y = 0; y < brightnessArray.height; y++) {\n    for (let x = 0; x < brightnessArray.width; x++) {\n      const pixel = document.createElement('div');\n      pixel.className = 'sukashi-pixel';\n      pixel.style.width = `${pixelSize}px`;\n      pixel.style.height = `${pixelSize}px`;\n      pixel.style.backgroundColor = 'white';\n      \n      const brightness = Math.max(0, Math.min(100, brightnessArray.data[y][x]));\n      pixel.style.filter = `brightness(${brightness}%)`;\n      \n      element.appendChild(pixel);\n    }\n  }\n  \n  if (container) {\n    container.appendChild(element);\n  }\n  \n  return element;\n}\n\nexport function createBrightnessArray(width: number, height: number, fill: number = 100): BrightnessArray {\n  const data: number[][] = [];\n  for (let y = 0; y < height; y++) {\n    data[y] = new Array(width).fill(fill);\n  }\n  return { data, width, height };\n}\n\nexport function setBrightness(brightnessArray: BrightnessArray, x: number, y: number, value: number): void {\n  if (x >= 0 && x < brightnessArray.width && y >= 0 && y < brightnessArray.height) {\n    brightnessArray.data[y][x] = Math.max(0, Math.min(100, value));\n  }\n}"],
  "mappings": ";AAWO,SAAS,gBAAyB;AACvC,SAAO,uBAAuB,KAAK,UAAU,SAAS;AACxD;AAEO,SAAS,cAAc,iBAAkC,UAA0B,CAAC,GAAgB;AACzG,QAAM,EAAE,YAAY,GAAG,UAAU,IAAI;AAErC,QAAM,UAAU,SAAS,cAAc,KAAK;AAC5C,UAAQ,YAAY;AACpB,UAAQ,MAAM,UAAU;AACxB,UAAQ,MAAM,sBAAsB,UAAU,gBAAgB,KAAK,KAAK,SAAS;AACjF,UAAQ,MAAM,mBAAmB,UAAU,gBAAgB,MAAM,KAAK,SAAS;AAC/E,UAAQ,MAAM,MAAM;AACpB,UAAQ,MAAM,QAAQ,GAAG,gBAAgB,QAAQ,SAAS;AAC1D,UAAQ,MAAM,SAAS,GAAG,gBAAgB,SAAS,SAAS;AAE5D,WAAS,IAAI,GAAG,IAAI,gBAAgB,QAAQ,KAAK;AAC/C,aAAS,IAAI,GAAG,IAAI,gBAAgB,OAAO,KAAK;AAC9C,YAAM,QAAQ,SAAS,cAAc,KAAK;AAC1C,YAAM,YAAY;AAClB,YAAM,MAAM,QAAQ,GAAG,SAAS;AAChC,YAAM,MAAM,SAAS,GAAG,SAAS;AACjC,YAAM,MAAM,kBAAkB;AAE9B,YAAM,aAAa,KAAK,IAAI,GAAG,KAAK,IAAI,KAAK,gBAAgB,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;AACxE,YAAM,MAAM,SAAS,cAAc,UAAU;AAE7C,cAAQ,YAAY,KAAK;AAAA,IAC3B;AAAA,EACF;AAEA,MAAI,WAAW;AACb,cAAU,YAAY,OAAO;AAAA,EAC/B;AAEA,SAAO;AACT;AAEO,SAAS,sBAAsB,OAAe,QAAgB,OAAe,KAAsB;AACxG,QAAM,OAAmB,CAAC;AAC1B,WAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,SAAK,CAAC,IAAI,IAAI,MAAM,KAAK,EAAE,KAAK,IAAI;AAAA,EACtC;AACA,SAAO,EAAE,MAAM,OAAO,OAAO;AAC/B;AAEO,SAAS,cAAc,iBAAkC,GAAW,GAAW,OAAqB;AACzG,MAAI,KAAK,KAAK,IAAI,gBAAgB,SAAS,KAAK,KAAK,IAAI,gBAAgB,QAAQ;AAC/E,oBAAgB,KAAK,CAAC,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG,KAAK,IAAI,KAAK,KAAK,CAAC;AAAA,EAC/D;AACF;",
  "names": []
}
